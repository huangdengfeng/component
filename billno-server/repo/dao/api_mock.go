// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package dao is a generated GoMock package.
package dao

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockBillnoDao is a mock of BillnoDao interface.
type MockBillnoDao struct {
	ctrl     *gomock.Controller
	recorder *MockBillnoDaoMockRecorder
}

// MockBillnoDaoMockRecorder is the mock recorder for MockBillnoDao.
type MockBillnoDaoMockRecorder struct {
	mock *MockBillnoDao
}

// NewMockBillnoDao creates a new mock instance.
func NewMockBillnoDao(ctrl *gomock.Controller) *MockBillnoDao {
	mock := &MockBillnoDao{ctrl: ctrl}
	mock.recorder = &MockBillnoDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillnoDao) EXPECT() *MockBillnoDaoMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockBillnoDao) FindAll(tx *gorm.DB) ([]*BillnoPO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", tx)
	ret0, _ := ret[0].([]*BillnoPO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockBillnoDaoMockRecorder) FindAll(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockBillnoDao)(nil).FindAll), tx)
}

// FindForUpdate mocks base method.
func (m *MockBillnoDao) FindForUpdate(tx *gorm.DB, bizCode string) (*BillnoPO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindForUpdate", tx, bizCode)
	ret0, _ := ret[0].(*BillnoPO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindForUpdate indicates an expected call of FindForUpdate.
func (mr *MockBillnoDaoMockRecorder) FindForUpdate(tx, bizCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindForUpdate", reflect.TypeOf((*MockBillnoDao)(nil).FindForUpdate), tx, bizCode)
}

// Update mocks base method.
func (m *MockBillnoDao) Update(tx *gorm.DB, bizCode string, current uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", tx, bizCode, current)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBillnoDaoMockRecorder) Update(tx, bizCode, current interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBillnoDao)(nil).Update), tx, bizCode, current)
}
